/**

This class allows to perform web methods.
@class WebClient
@module net
@example
        const SERVER = "www.example.com";
        const PORT = 80;    // for http protocol
        
        this.web = new WebClient();
        this.web.open(SERVER, PORT, false, "");
        this.web.onError = function(sender)
        {
            System.messageBox("An error occurred!");
        }
        
        this.web.onReceiving = function(sender, received, total)
        {
            console&lt;&lt;"downloaded " + received + "B.\n";
        }
        
        this.web.onReceived = function(sender)
        {
            // to decode text use:
            System.messageBox("received: " + this.data.toString("utf8"));
            // to decode image file use:
            this super.img = Bitmap.fromBytes(this.data);
            app.invalidate();
        
        }
        
        this.web.onCancel = function(sender)
        {
            System.messageBox("Downloading canceled!");
        }
        
        this.web.getData("/getdata/anyscript");
*/
class WebClient
{

    /**
    Object constructor.
    @method this
    @param file {String} Name of archive to create.
    @return {WebClient} New instance of Zip class, which manages operations with archive
    @example
            this.web = new WebClient();
            this.web.open(SERVER, PORT, false, "");
            this.web.onReceived = function(sender)
            {
                   ...
            }
            this.web.getData("/getdata/anyscript");
    */
    function this() { }


    /**
    Function opens web location for working.
    @method open
    @param host {String} Url of required location.
    @param port=80 {Integer} Port for conection, the default isNaN 80.
    @param useSSL=false {Boolean} Specifies if the web object uses SSL or not, the default is false.
    @param [proxy] {String} Determines the proxy server, the default is none.
    @example
            this.web = new WebClient();
            this.web.open(SERVER, PORT, false, "");
    */
    function open(host, port = 80, useSSL = false [, proxy]){}

    /**
    This function cancel running operations of WebClient.
    @method cancel
    */
    function cancel(){}

    /**
    Easy way to get data from server. Data from the server are saved to a file to location set by second parameter.
    @method getData
    @param resource {String} Server resource file.
    @param [responseToFile] {String} Destination location.
    @example
            this.web = new WebClient();
            this.web.open(SERVER, PORT, false, "");
            this.web.getData("/getdata/anyscript");
    */
    function getData(resource [, responseToFile]){}

    /**
    Function posts data to the server.
    @method postData
    @param resource {String} erver resource location
    @param data {Bytes|String} Data to send. Byte of array or text string
    @param [responseToFile] {String} Location of file, where response would be saved.
    @example
            this.web = new WebClient();
            this.web.open(SERVER, PORT, false, "");
            web.postData("/import.php", data);
    */
    function postData(resource, data [, responseToFile]){}

    /**
    Function posts data to the server.
    @method postFile
    @param resource {String} erver resource location
    @param fileToPost {String} Path to the file to send.
    @param [responseToFile] {String} Location of file, where response would be saved.
    @example
            this.web = new WebClient();
            this.web.open(SERVER, PORT, false, "");
            web.postData("/import.php", data);
    */
    function postFile(resource, fileToPost [, responseToFile]){}

    /**
    Server URL.
    @property host
    @type {String}
    @readOnly
    */
    property host(){}

    /**
     Port number.
    @property port
    @type {Integer}
    @readOnly
    */
    property port(){}

    /**
    Value is true if connection is secured by SSL protocol. Otherwise the value is false.
    @property secure
    @type {Boolean}
    @readOnly
    */
    property secure(){}

    /**
    Number representatin of state.
    @property state
    @type {Integer}
    @readOnly
    */
    property state(){}

    /**
    Received vector of bytes.
    @property data
    @type {Bytes}
    @readOnly
    */
    property data(){}

    /**
    Last code error.
    @property errorCode
    @type {Integer}
    @readOnly
    */
    property errorCode(){}

    /**
    Last error message generated by the WebClient object.
    @property errorMessage
    @type {String}
    @readOnly
    */
    property errorMessage(){}

    /**
    Callback which is called when an error appears.
    @event onError
    @example
            this.web = new WebClient();
            this.web.open(SERVER, PORT, false, "");
            this.web.onError = function(sender)
            {
                    System.messageBox("An error occurred!");
            }
            this.web.getData("/getdata/anyscript");
    */
    property onError(){}

    /**
    Callback function which is called when new data has been received.
    @event onReceived
    @example
             this.web = new WebClient();
             this.web.open(SERVER, PORT, false, "");
             this.web.onReceived = function(sender)
             {
                    // to decode text use:
                    System.messageBox("received: " + this.data.toString("utf8"));
                    // to decode image file use:
                    this super.img = Bitmap.fromBytes(this.data);
                    app.invalidate();
             }
            this.web.getData("/getdata/anyscript");
    */
    property onReceived(){}

    /**
    Callback function which is called while receiving new data.
    @param bytes {Integer} Number of received bytes
    @param bytesTotal {Integer} Number of all bytes to receive, can be zero (depends on server).
    @event onReceiving
    @example
            his.web = new WebClient();
            this.web.open(SERVER, PORT, false, "");
             this.web.onReceiving = function(sender, received, total)
             {
                    console<<"downloaded " + received + "B.\n";
             }
            this.web.getData("/getdata/anyscript");
    */
    property onReceiving(bytes, bytesTotal){}

    /**
    Callback function which is called while sending data.
    @param bytes {Integer} Number of bytes sent to data.
    @param bytesTotal {Integer} Total bytes to be sent to server.
    @event onSending
    @example
            his.web = new WebClient();
            this.web.open(SERVER, PORT, false, "");
             this.web.onReceiving = function(sender, received, total)
             {
                    console<<"downloaded " + received + "B.\n";
             }
            this.web.getData("/getdata/anyscript");
    */
    property onSending(bytes, bytesTotal){}

    /**
    Callback which is called when some web operation is cancelled.
    @event onCancel
    @example
            this.web = new WebClient();
            this.web.open(SERVER, PORT, false, "");
            this.web.onCancel = function(sender)
            {
                    System.messageBox("Downloading canceled!");
            }
            
            this.web.getData("/getdata/anyscript");
    */
    property onCancel(){}

}